import org.ajoberstar.grgit.Commit
import org.ajoberstar.grgit.Credentials
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Remote

import java.util.function.Predicate

plugins {
    id 'groovy'
    id 'java'
    id 'checkstyle'
    id "org.ajoberstar.grgit" version "3.1.1"
}

group 'ru.sberbank.school'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

subprojects {
    version = project.properties['version']
}

def homeRepo = 'https://github.com/sberbankjavaschool/homework.git'
def gitUser = hasProperty('gitUser') ? gitUser : null
def gitPass = hasProperty('gitPass') ? gitPass : null

def sherlockPath = File.createTempDir()
sherlockPath.deleteOnExit()

task forceRebase {
    // Оставь надежду всякий сюда смотрящий
    doFirst {
        def target = project.hasProperty("targetBranch")
        if (!target) {
            println 'MISSING PARAMS'
            return 1
        }

        def tempDir = File.createTempDir()
        println tempDir.path
        tempDir.deleteOnExit()

        print "Cloning... "
        def grgit = Grgit.clone(dir: tempDir,
                uri: homeRepo,
                checkout: true,
                refToCheckout: "refs/heads/${targetBranch}",
                credentials: new Credentials(gitUser, gitPass))

        println "OK"

        grgit.fetch()
        grgit.pull(remote: "origin", branch: targetBranch, rebase: true)
        grgit.pull(remote: "origin", branch: 'source', rebase: false)
        println "pulled from source"

        grgit.push(remote: "origin", refsOrSpecs: ["+refs/heads/${targetBranch}:${targetBranch}"])
        print "pushed to: target"
    }
}

task checkIfSourceBranchPulled {
    doFirst {
        def source = project.hasProperty("sourceBranch")
        def sourceUrlExists = project.hasProperty("forkRepo")
        if (!source || !sourceUrlExists) {
            println 'MISSING PARAMS'
            return
        }
        Grgit grgit = getGrgit(gitUser, gitPass, homeRepo, "source")
        List<Commit> log = grgit.log()
        grgit = getGrgit(gitUser, gitPass, forkRepo, sourceBranch)
        List<Commit> commits = grgit.log()
        def missingCommits = log.stream()
                .filter { commit -> !commits.contains(commit) }
                .toList()
        if (!missingCommits.isEmpty()) {
            List<String> strs = missingCommits.stream()
                    .map { commit -> "$commit.author.email: $commit.shortMessage ($commit.id)" }
                    .toList()
            throw new RuntimeException(String.join(",\n", strs))
        }
        println "OK"
    }
}

task tryToPushToForkRepo {
    doFirst {
        def source = project.hasProperty("sourceBranch")
        def sourceUrlExists = project.hasProperty("forkRepo")
        if (!source || !sourceUrlExists) {
            println 'MISSING PARAMS'
            return
        }
        Grgit grgit = getGrgit(gitUser, gitPass, forkRepo, sourceBranch)
        grgit.remote.add(name: 'common', url: homeRepo, fetchRefSpecs: ['+refs/heads/source:source'])
        grgit.fetch(remote: 'common')
        grgit.pull(remote: 'origin', branch: sourceBranch, rebase: true)
        grgit.pull(remote: 'common', branch: 'source', rebase: true)
        grgit.push(remote: 'origin', force: false, refsOrSpecs: ["+refs/heads/${sourceBranch}:${sourceBranch}"])

        println "OK"
    }
}


private Grgit getGrgit(String gitUser, String gitPass, String url, String branch) {
    def tempDir = File.createTempDir()
    println tempDir.path
    tempDir.deleteOnExit()

    print "Cloning... "
    def grgit = Grgit.clone(dir: tempDir,
            uri: url,
            checkout: true,
            refToCheckout: "refs/heads/${branch}",
            credentials: new Credentials(gitUser, gitPass))
    grgit
}

private Predicate<Remote> getPredicate(String param) {
    new Predicate<Remote>() {
        @Override
        boolean test(Remote remote) {
            return remote.name == param
        }
    }
}

task checkoutSherlock {
    doFirst {
        if (gitUser == null) {
            println "MISSING 'GIT USER'"
        }
        def grgit = Grgit.clone(dir: sherlockPath,
                uri: "https://github.com/jenkins-java-school-2019/sherlock.git",
                credentials: new Credentials(gitUser, gitPass))
    }
}

task clearSherlock {
    doFirst {
        def file = new File("./watson/src")
        println file.absolutePath
        file.deleteDir()
    }
}

task copySherlock(type: Copy) {
    dependsOn clearSherlock
    dependsOn checkoutSherlock

    from file("${sherlockPath}/src/test/")
    into file("./watson/src/test/")
}

task runSherlock() {
    dependsOn ':watson:test'
}

dependencies {
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.ajoberstar.grgit:grgit-core:3.1.1'

    implementation 'com.google.guava:guava:27.1-jre'

    testCompile "org.junit.jupiter:junit-jupiter-api:5.3.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.0"
    testRuntime "org.junit.vintage:junit-vintage-engine:5.3.0"
}